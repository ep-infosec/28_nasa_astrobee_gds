/*******************************************************************************
 * Copyright (c) 2013 United States Government as represented by the 
 * Administrator of the National Aeronautics and Space Administration. 
 * All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package gov.nasa.ensemble.ui.databinding.widgets.customization;

import gov.nasa.ensemble.ui.databinding.util.MethodUtil;
import gov.nasa.ensemble.ui.databinding.validation.ISimpleValidator;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.log4j.Logger;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.core.runtime.IExtensionRegistry;
import org.eclipse.core.runtime.Platform;
import org.osgi.framework.Bundle;

/**
 * A simple implementation of a customization.
 * A customization allows some tuning of the autogenerated widget ui.
 * This is the most robust way to create validators and converters.
 * 
 * @author tecohen
 *
 */
@SuppressWarnings("unchecked")
public class Customization implements ICustomization {
	
	final private static Logger logger = Logger.getLogger(Customization.class);
	
	protected static HashMap<String, IConfigurationElement> s_customExtensions; // hash map to store info about custom widgets described via extension point
	protected List<FieldCustomization> m_fields = new ArrayList<FieldCustomization>();		// the fields
	protected List<GroupCustomization> m_groups = new ArrayList<GroupCustomization>();			// the groups
	protected List<String> m_children = new ArrayList<String>();	// the ordered list of ids
	
	/**
	 * Constructor, calls initialization
	 */
	protected Customization() {
		initialize();
	}
	
	/**
	 * Initialize the m_widgetFieldInfos. 
	 * Initialize the groups, if any.
	 */
	protected void initialize() {
		//does nothing: to be extended as needed by subclasses
	}
	
	/* (non-Javadoc)
	 * @see gov.nasa.ensemble.ui.databinding.databinding.ICustomization#getValidator()
	 */
	public ISimpleValidator getValidator() {
		return null;
	}

	/* 
	 * This supports looking in groups one level deep
	 * (non-Javadoc)
	 * @see gov.nasa.ensemble.ui.databinding.databinding.ICustomization#getWidgetFieldInfo(java.lang.String)
	 */
	public FieldCustomization getField(String key) {
		for (FieldCustomization wfi : m_fields){
			if (wfi.getName().equalsIgnoreCase(key)){
				return wfi;
			}
		}
		return null;
	}
	
	/* 
	 * This supports looking in groups one level deep
	 * (non-Javadoc)
	 * @see gov.nasa.ensemble.ui.databinding.databinding.ICustomization#getWidgetFieldInfo(java.lang.String)
	 */
	public GroupCustomization getGroup(String key) {
		for (GroupCustomization wfi : m_groups){
			if (wfi.getName().equalsIgnoreCase(key)){
				return wfi;
			}
		}
		return null;
	}

	/* (non-Javadoc)
	 * @see gov.nasa.ensemble.ui.databinding.databinding.ICustomization#getWidgetFieldInfos()
	 */
	public List<FieldCustomization> getFields() {
		return m_fields;
	}

	/* (non-Javadoc)
	 * @see gov.nasa.ensemble.ui.databinding.widgets.customization.ICustomization#getGroups()
	 */
	public List<GroupCustomization> getGroups() {
		return m_groups;
	}

	/**
	 * @param groups
	 */
	public void setGroups(List<GroupCustomization> groups) {
		m_groups = groups;
	}

	/* (non-Javadoc)
	 * @see gov.nasa.ensemble.ui.databinding.widgets.customization.ICustomization#getOrderedWidgets()
	 */
	public List<String> getOrderedWidgets() {
		return m_children;
	}

	/**
	 * @param children
	 */
	public void setOrderedWidgets(List<String> children) {
		m_children = children;
	}
	
	/**
	 * @param children
	 */
	public void addOrderedWidgets(String[] children){
		for (String child : children){
			m_children.add(child);
		}
	}

	/**
	 * @param fields
	 */
	public void setFields(List<FieldCustomization> fields) {
		m_fields = fields;
	}

	/**
	 * Initialize extension point map 
	 */
	protected static void initializeExtensions(){
		if (s_customExtensions == null){
			s_customExtensions = new HashMap<String, IConfigurationElement>();
			// XXX why does this even work? I thought I was running E4???
			IExtensionRegistry reg = Platform.getExtensionRegistry();
			
			IConfigurationElement[] genericExtensions = reg.getConfigurationElementsFor("gov.nasa.ensemble.ui.databinding.e4.gov.nasa.ensemble.ui.databinding.widget.Customization");
			for (IConfigurationElement element : genericExtensions){
				String theClass = element.getAttribute("class");
				s_customExtensions.put(theClass, element);
			}
		}
	}
	
	/**
	 * Get the custom widget
	 * @param pClass
	 * @return
	 */
	public static ICustomization getCustomization(Class pClass){
		
		if (pClass == null){
			return null;
		}
		// first look in the class
		try {
			Method method = pClass.getMethod("getCustomization", (Class[])null);
			ICustomization result = (ICustomization)method.invoke(null, (Object[])null);
			return result;
		} catch (SecurityException e) {
			// do nothing
		} catch (NoSuchMethodException e) {
			// do nothing
		} catch (IllegalArgumentException e) {
			// do nothing
		} catch (IllegalAccessException e) {
			// do nothing
		} catch (InvocationTargetException e) {
			// do nothing
		}
		
		// try finding it from the extension point
		return getRegisteredCustomization(pClass);
	}
	
	/**
	 * look up and load any customization that has been registered via extension point
	 * @return
	 */
	public static ICustomization getRegisteredCustomization(Class pClass){
		initializeExtensions();
		
		IConfigurationElement element = s_customExtensions.get(pClass.getName());
		if (element == null){
			List<Class> classes = MethodUtil.getAllClasses(pClass);
			for (Class i : classes){
				element = s_customExtensions.get(i.getCanonicalName());
				if (element != null){
					break;
				}
			}
			if (element == null){
				List<Class> interfaces = MethodUtil.getAllInterfaces(pClass);
				for (Class i : interfaces){
					element = s_customExtensions.get(i.getCanonicalName());
					if (element != null){
						break;
					}
				}
			}
			if (element == null){
				return null;
			}
		}
		String theCustomization = element.getAttribute("customization");
		Bundle bun = Platform.getBundle(element.getContributor().getName());
		try {
			Class customizationClass = bun.loadClass(theCustomization);
			Method method = customizationClass.getMethod("getCustomization", (Class[])null);
			ICustomization result = (ICustomization)method.invoke(null, (Object[])null);
			return result;
		} catch (ClassNotFoundException e) {
			logger.warn(e);
		} catch (SecurityException e) {
			logger.warn(e);
		} catch (NoSuchMethodException e) {
			logger.warn(e);
		} catch (IllegalArgumentException e) {
			logger.warn(e);
		} catch (IllegalAccessException e) {
			logger.warn(e);
		} catch (InvocationTargetException e) {
			logger.warn(e);
		}
		return null;
	}
	
	/**
	 * Returns true if this customization has no child content
	 * @return
	 */
	public boolean isEmpty() {
		return (m_fields.isEmpty() && m_groups.isEmpty() && m_children.isEmpty());
	}
}
