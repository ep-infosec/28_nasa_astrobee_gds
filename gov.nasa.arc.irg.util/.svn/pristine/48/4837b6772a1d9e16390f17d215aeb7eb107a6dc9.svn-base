/*******************************************************************************
 * Copyright (c) 2013 United States Government as represented by the 
 * Administrator of the National Aeronautics and Space Administration. 
 * All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package gov.nasa.arc.irg.util.connection;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

public class ConnectionListenerRegistry {

	protected Set<IConnectionListener> m_listeners = new HashSet<IConnectionListener>();
	protected boolean m_isConnected = false;
	
	public static final HashMap<String, ConnectionListenerRegistry> s_connectionListenerRegistryMap = new HashMap<String, ConnectionListenerRegistry>();


	public static String s_defaultRegistryKey = null;
	
	
	/**
	 * Retrieve a registry, create one if necessary
	 * @param key
	 * @return
	 */
	public static ConnectionListenerRegistry getRegistry(String key) {
		ConnectionListenerRegistry found = s_connectionListenerRegistryMap.get(key);
		if (found == null){
			found = new ConnectionListenerRegistry();
			s_connectionListenerRegistryMap.put(key, found);
		}
		return found;
	}
	
	public static ConnectionListenerRegistry getDefaultRegistry() throws Exception {
		if (s_defaultRegistryKey != null){
			return getRegistry(s_defaultRegistryKey);
		}
		throw new Exception("Default registry not set up.");
	}
	
	public void overrideConnectionStatus(boolean connected){
		m_isConnected = connected;
		notifyListeners();
	}

	public void statusChanged( boolean connected) {
		m_isConnected = connected;
		notifyListeners();
	}

	protected void notifyListeners() {
		if (m_isConnected) {
			for (IConnectionListener isl : m_listeners) {
				isl.onConnect();
			}
		} else {
			for (IConnectionListener isl : m_listeners) {
				isl.onDisconnect();
			}
		}
	}

	public void add(IConnectionListener listener) {
		if (!m_listeners.contains(listener)) {
			m_listeners.add(listener);
			if (m_isConnected) {
				listener.onConnect();
			} else {
				listener.onDisconnect();
			}
		}
	}

	public void remove(IConnectionListener listener) {
		m_listeners.remove(listener);
	}
	
	public boolean isConnected(){
		return m_isConnected;
	}

	public static String getDefaultRegistryKey() {
		return s_defaultRegistryKey;
	}

	public static void setDefaultRegistryKey(String defaultRegistryKey) {
		s_defaultRegistryKey = defaultRegistryKey;
	}
}
