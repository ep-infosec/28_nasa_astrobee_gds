#ifndef rapid_ext_arc_DlpSample_idl
#define rapid_ext_arc_DlpSample_idl

/*
 * Copyright (c) 2009 United States Government as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All Rights Reserved.
 */

#include "Message.idl"

/**
 * \file
 *
 * \brief DlpConfig defines the frame in which DlpSample is sent.
 *
 * \ingroup idlfiles
 */
module rapid 
{
  module ext 
  {
    module arc 
    {
      struct DlpChannelSample
      {
        boolean powered;
        float voltage;
        float current;
      };

      struct DlpBoardSample
      {
        DlpChannelSample channels[3];
        float temp;
      };
      
      typedef sequence<DlpBoardSample, 32> DlpBoardSampleSequence32;

      //@copy-c-declaration class DlpSampleTypeSupport;
      //@copy-c-declaration class DlpSampleDataWriter;
      //@copy-c-declaration class DlpSampleDataReader;
      //@copy-c-declaration struct DlpSampleSeq;

      //@copy-declaration /**
      //@copy-declaration  * DlpSample message delivers the position of the Agent. Corresponding DlpConfig sets up the
      //@copy-declaration  * coordinate frame and specifies how the Transform3D.rot field is to be interpreted for pose and velocity.
      //@copy-declaration  */
      valuetype DlpSample : Message 
      {
        //@copy-c-declaration #if RTI_DDS_VERSION_MAJOR < 4 || (RTI_DDS_VERSION_MAJOR == 4  && RTI_DDS_VERSION_MINOR < 5) || (RTI_DDS_VERSION_MAJOR == 4  && RTI_DDS_VERSION_MINOR  == 5 && RTI_DDS_VERSION_RELEASE != 'f' )
        //@copy-c-declaration typedef DlpSampleTypeSupport TypeSupport;

        //@copy-c-declaration typedef DlpSampleDataWriter DataWriter;
        //@copy-c-declaration typedef DlpSampleDataReader DataReader;
        //@copy-c-declaration typedef DlpSampleSeq Seq;
        //@copy-c-declaration #endif
        //@copy-c-declaration typedef DlpSample Type;

        public DlpBoardSampleSequence32 dlpBoards;
     };
    };
  };
};

#endif // rapid_ext_arc_DlpSample_idl
