#ifndef rapid_ext_RangeScanConfig_idl
#define rapid_ext_RangeScanConfig_idl

/*
 * Copyright (c) 2009 United States Government as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All Rights Reserved.
 */

#include "Message.idl"

/**
 * \file
 *
 * \brief RangeScanConfig defines how range scan sensor data is sent in RangeScanSample.
 *
 * \ingroup idlfiles
 */
module rapid {

  module ext {

    enum RangeScanDirection {
        SCAN_HORIZONTAL,
        SCAN_VERTICAL
    };
   
    typedef sequence<rapid::Transform3D, 64> Transform3DSequence64;

    //@copy-c-declaration class RangeScanConfigTypeSupport;
    //@copy-c-declaration class RangeScanConfigDataWriter;
    //@copy-c-declaration class RangeScanConfigDataReader;
    //@copy-c-declaration struct RangeScanConfigSeq;

    //@copy-declaration /**  Single (or multiple) line range scan. */
    valuetype RangeScanConfig : Message {

      //@copy-c-declaration #if RTI_DDS_VERSION_MAJOR < 4 || (RTI_DDS_VERSION_MAJOR == 4  && RTI_DDS_VERSION_MINOR < 5) || (RTI_DDS_VERSION_MAJOR == 4  && RTI_DDS_VERSION_MINOR  == 5 && RTI_DDS_VERSION_RELEASE != 'f' )
      //@copy-c-declaration typedef RangeScanConfigTypeSupport TypeSupport;
      //@copy-c-declaration typedef RangeScanConfigDataWriter DataWriter;
      //@copy-c-declaration typedef RangeScanConfigDataReader DataReader;
      //@copy-c-declaration typedef RangeScanConfigSeq Seq;
      //@copy-c-declaration #endif
      //@copy-c-declaration typedef RangeScanConfig Type;

      //@copy-declaration /** Reference frame. */
      public String128 referenceFrame;

      //@copy-declaration /**
      //@copy-declaration  * Descriptions of rows from the same scan-line. If instrument is a single line scanner, this is
      //@copy-declaration  * unused. If instrument has multiple scan lines, this defines which samples belong to which scan
      //@copy-declaration  * line. e.g. if there are 4 scan lines of 100 points each, the Sample vector would be of size 400,
      //@copy-declaration  * and rowLengths = {100, 100, 100, 100}.
      //@copy-declaration  */
      public ShortSequence64 scanLengths;

      //@copy-declaration /**
      //@copy-declaration  * Specifies whether the scan lines are aligned horizontally (i.e. azimuth first)
      //@copy-declaration  * or vertically (i.e. elevation first)
      //@copy-declaration  */
      public RangeScanDirection scanDirection;
      
      //@copy-declaration /**
      //@copy-declaration  * Horizontal shot angles of samples in a scan-line for those sensors
      //@copy-declaration  * that have <b>static</b> horizontal spacing. For sensors with dynamic horizontal
      //@copy-declaration  * spacing, this sequence will be empty and the corresponding member in 
      //@copy-declaration  * RangeScanSample will be used. 
      //@copy-declaration  */
      public ShortSequence64 scanAzimuth;
      //@copy-declaration /** Scaling factor to convert azimuth units to radians. */
      public float           scanAzimuthScale;
      
      //@copy-declaration /**
      //@copy-declaration  * Vertical shot angles of samples for those sensors that have <b>static</b>
      //@copy-declaration  * vertical spacing between scan lines. For sensors with dynamic vertical
      //@copy-declaration  * spacing, this sequence will be empty and the corresponding member in 
      //@copy-declaration  * RangeScanSample will be used. 
      //@copy-declaration  */
      public ShortSequence64 scanElevation;
      //@copy-declaration /** Scaling factor to convert elevation units to radians. */
      public float           scanElevationScale;
      
      //@copy-declaration /** Scaling factor to convert range units to meters. */
      public float rangeScale;
      
      //@copy-declaration /** 
      //@copy-declaration  * Scaling factor to convert byte value to intensity units 
      //@copy-declaration  * FIXME: this is underspecified. What are intensity units?
      //@copy-declaration  */
      public float intensityScale;

    };
  };
};

#endif // rapid_ext_RangeScanConfig_idl
