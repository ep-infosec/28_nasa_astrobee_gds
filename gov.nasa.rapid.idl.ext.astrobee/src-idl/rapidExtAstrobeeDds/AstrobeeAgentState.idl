/*
 * Copyright (c) 2015 United States Government as represented by the 
 * Administrator of the National Aeronautics and Space Administration.
 * All Rights Reserved.
 */

#include "Message.idl"

module rapid {
  module ext {
    module astrobee {

      //@copy-declaration /**
      //@copy-declaration  * Operating state of Astrobee
      //@copy-declaration  * <ul>
      //@copy-declaration  *   <li>OPERATING_STATE_STORED: Robot is stored and possibly completely shut off.
      //@copy-declaration  *   <li>OPERATING_STATE_HIBERNATING: Robot is hibernating, but ready to take commands.
      //@copy-declaration  *   <li>OPERATING_STATE_PLAN_EXECUTING: Robot is executing a loaded plan
      //@copy-declaration  *   <li>OPERATING_STATE_TELEOP_EXECUTING: Robot is executing a teleop command
      //@copy-declaration  *   <li>OPERATING_STATE_SAFE_STOP: Robot is holding it's position.
      //@copy-declaration  *   <li>OPERATING_STATE_STOPPING: Robot is transitioning to Safe Stop
      //@copy-declaration  *   <li>OPERATING_STATE_SAFE_RETURN: Robot returns to dock
      //@copy-declaration  *   <li>OPERATING_STATE_SAFE_TERMINATE: Robot mobility system is disabled (robot will drift if in free space)
      //@copy-declaration  *   <li>OPERATING_STATE_GUEST_SCIENCE: Guest science has control.
      //@copy-declaration  * </ul>
      //@copy-declaration  */
      enum OperatingState { 
        OPERATING_STATE_STORED,
        OPERATING_STATE_HIBERNATING,
        OPERATING_STATE_PLAN_EXECUTING,
        OPERATING_STATE_TELEOP_EXECUTING,
        OPERATING_STATE_SAFE_STOP,
        OPERATING_STATE_STOPPING,
        OPERATING_STATE_SAFE_RETURN,
        OPERATING_STATE_SAFE_TERMINATE,
        OPERATING_STATE_GUEST_SCIENCE
      };

      //@copy-declaration /**
      //@copy-declaration  * Executing state of Astrobee
      //@copy-declaration  * <ul>
      //@copy-declaration  *   <li>EXECUTION_STATE_IDLE: Robot does not have a plan loaded.
      //@copy-declaration  *   <li>EXECUTION_STATE_EXECUTING: Robot is executing a plan
      //@copy-declaration  *   <li>EXECUTION_STATE_PAUSED: Robot is not executing a plan, but has a plan loaded and ready to resume
      //@copy-declaration  * </ul>
      //@copy-declaration  */
      enum ExecutionState {
        EXECUTION_STATE_IDLE,
        EXECUTION_STATE_EXECUTING,
        EXECUTION_STATE_PAUSED
      };

      //@copy-declaration /**
      //@copy-declaration  * Mobility state of Astrobee
      //@copy-declaration  * <ul>
      //@copy-declaration  *   <li>MOBILITY_STATE_FREE_FLIGHT: Robot is floating around in spaaaaace
      //@copy-declaration  *   <li>MOBILITY_STATE_DOCKING: Robot is in the middle of docking.
      //@copy-declaration  *   <li>MOBILITY_STATE_DOCKED: Robot is docked.
      //@copy-declaration  *   <li>MOBILITY_STATE_PERCHING: Robot is in the middle of perching via the arm
      //@copy-declaration  *   <li>MOBILITY_STATE_PERCHED: Robot is perched.
      //@copy-declaration  * </ul>
      //@copy-declaration  */
      enum MobilityState {
        MOBILITY_STATE_FREE_FLIGHT,
        MOBILITY_STATE_DOCKING,
        MOBILITY_STATE_DOCKED,
        MOBILITY_STATE_PERCHING,
        MOBILITY_STATE_PERCHED
      };

      //@copy-c-declaration class AgentStateTypeSupport;
      //@copy-c-declaration class AgentStateDataWriter;
      //@copy-c-declaration class AgentStateDataReader;
      //@copy-c-declaration struct AgentStateSeq;

      //@copy-declaration /**
      //@copy-declaration   * The state of Astrobee.
      //@copy-declaration   */
      valuetype AgentState : Message {
        //@copy-c-declaration #if RTI_DDS_VERSION_MAJOR < 4 || (RTI_DDS_VERSION_MAJOR == 4  && RTI_DDS_VERSION_MINOR < 5) || (RTI_DDS_VERSION_MAJOR == 4  && RTI_DDS_VERSION_MINOR  == 5 && RTI_DDS_VERSION_RELEASE != 'f' )
        //@copy-c-declaration typedef AgentStateTypeSupport TypeSupport;
        //@copy-c-declaration typedef AgentStateDataWriter DataWriter;
        //@copy-c-declaration typedef AgentStateDataReader DataReader;
        //@copy-c-declaration typedef AgentStateSeq Seq;
        //@copy-c-declaration #endif
        //@copy-c-declaration typedef AgentState Type;

        //@copy-declaration /**  @see OperatingState */
        public OperatingState operatingState;

        //@copy-declaration /**  @see ExecutionState */
        public ExecutionState executingState;

        //@copy-declaration /**  @see MobilityState */
        public MobilityState mobilityState;

        //@copy-declaration /**  For MOBILITY_STATE_PERCHING and MOBILITY_STATE_DOCKING, 
        //@copy-declaration   *  this specifies the proximity to the target.  In other states
        //@copy-declaration   *  this field's value SHOULD be 0.
        //@copy-declaration   */
        public float proximity;

        //@copy-declaration /**  The Executing State of Guest Science mode of Astrobee,
        //@copy-declaration   *  this is only valid if the Operating State is
        //@copy-declaration   *  OPERATING_STATE_GUEST_SCIENCE
        //@copy-declaration   */
        public ExecutionState guestScienceState;

	//@copy-declaration /**  Name of the set of operating limits (ie next five params)s */
	public String32 safeguardStateName;

        //@copy-declaration /**  The operational hard limit on Astrobee's speed in m/s */
        public float speedLimit;

        //@copy-declaration /**  The operational hard limit on the acceleration of Astrobee.  */
        public float accelerationLimit;

        //@copy-declaration /**  The operational hard limit on the distance to obstacles.  */
        public float obstacleDistanceLimit;

        //@copy-declaration /**  The target speed Astrobee is aiming for.  */
        public float targetSpeed;

        //@copy-declaration /**  The target velocity Astrobee is aiming for.  */
        public float targetVelocity;

	//@copy-declaration /**  Allow Astrobee to fly in a direction it does not have cameras pointing  */
	public boolean allowBlindFlying;

	//@copy-declaration /**  Distance to keep from keepout zones  */
        public float keepoutMargin;

	//@copy-declaration /**  Set to false to disable keepout checks  */
	public boolean checkKeepouts;

	//@copy-declaration /**  Astrobee's position certainty.  */
        public float ekfConfidence;

        //@copy-declaration /**  Number of seconds since the Unix Epoch.  */
        public long bootTime;
      };

    };
  };
};
