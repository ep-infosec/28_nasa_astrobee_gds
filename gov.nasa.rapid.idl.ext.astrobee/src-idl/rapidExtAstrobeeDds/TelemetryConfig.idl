/*
 * Copyright 2015 (c) 2015 Intelligent Robotics Group, NASA ARC
 */

#include "Message.idl"

module rapid {
  module ext {
    module astrobee {

      enum CameraResolution {
        // 4:3 resolutions
        RESOLUTION_320_240,
        RESOLUTION_640_480,
        RESOLUTION_800_600,
        RESOLUTION_1024_768,
        RESOLUTION_1280_960,

        // 16:9 resolutions
        RESOLUTION_320_180,
        RESOLUTION_640_360,
        RESOLUTION_1280_720,
        RESOLUTION_1920_1080,

        // Other resolutions
        RESOLUTION_224_171
      };

      typedef sequence<CameraResolution, 8> CameraResolutionSequence8;

      enum CameraMode {
        MODE_VIDEO,
        MODE_FRAMES
      };

      struct CameraInfoConfig {
        String32 name;
        CameraResolutionSequence8 availResolutions;
        CameraMode mode;
        float maxFrameRate;
      };

      typedef sequence<CameraInfoConfig, 8> CameraInfoConfigSequence8;

      //@copy-c-declaration class TelemetryConfigTypeSupport;
      //@copy-c-declaration class TelemetryConfigDataWriter;
      //@copy-c-declaration class TelemetryConfigDataReader;
      //@copy-c-declaration struct TelemetryConfigSeq;

      //@copy-declaration /**
      //@copy-declaration   * Configuration message for a TelemetryState message
      //@copy-declaration   */
      valuetype TelemetryConfig : Message {
        //@copy-c-declaration #if RTI_DDS_VERSION_MAJOR < 4 || (RTI_DDS_VERSION_MAJOR == 4  && RTI_DDS_VERSION_MINOR < 5) || (RTI_DDS_VERSION_MAJOR == 4  && RTI_DDS_VERSION_MINOR  == 5 && RTI_DDS_VERSION_RELEASE != 'f' )
        //@copy-c-declaration typedef TelemetryConfigTypeSupport TypeSupport;
        //@copy-c-declaration typedef TelemetryConfigDataWriter DataWriter;
        //@copy-c-declaration typedef TelemetryConfigDataReader DataReader;
        //@copy-c-declaration typedef TelemetryConfigSeq Seq;
        //@copy-c-declaration #endif
        //@copy-c-declaration typedef TelemetryConfig Type;

        public CameraInfoConfigSequence8 cameras;
      };

      struct CameraInfo {
        boolean streaming;
        boolean recording;
        CameraResolution resolution;
        float frameRate;
        float bandwidth;
      };

      typedef sequence<CameraInfo, 8> CameraInfoSequence8;

      //@copy-c-declaration class TelemetryStateTypeSupport;
      //@copy-c-declaration class TelemetryStateDataWriter;
      //@copy-c-declaration class TelemetryStateDataReader;
      //@copy-c-declaration struct TelemetryStateSeq;

      //@copy-declaration /**
      //@copy-declaration   * The state of telemetry flowing to GDS
      //@copy-declaration   */
      valuetype TelemetryState : Message {
        //@copy-c-declaration #if RTI_DDS_VERSION_MAJOR < 4 || (RTI_DDS_VERSION_MAJOR == 4  && RTI_DDS_VERSION_MINOR < 5) || (RTI_DDS_VERSION_MAJOR == 4  && RTI_DDS_VERSION_MINOR  == 5 && RTI_DDS_VERSION_RELEASE != 'f' )
        //@copy-c-declaration typedef TelemetryStateTypeSupport TypeSupport;
        //@copy-c-declaration typedef TelemetryStateDataWriter DataWriter;
        //@copy-c-declaration typedef TelemetryStateDataReader DataReader;
        //@copy-c-declaration typedef TelemetryStateSeq Seq;
        //@copy-c-declaration #endif
        //@copy-c-declaration typedef TelemetryState Type;

        public long positionRate;
        public long stateVectorRate;
        public long commStatusRate;
        public long diskStateRate;

        public CameraInfoSequence8 cameras;
      };

    };
  };
};
